boxplot(data$Chance.of.Admit ~ data$University.Rating, main = "Chance of Admit by University Rating",
xlab = "University Rating", ylab = "Chance of Admit", col = "lightgreen")
# 设置图形排列
par(mfrow = c(2, 2))
# Histogram and boxplot for Research
barplot(table(data$Research), main = "Barplot of Research", col = "skyblue",
xlab = "Research (0 = No, 1 = Yes)", ylab = "Frequency")
boxplot(data$Chance.of.Admit ~ data$Research, main = "Research vs Chance of Admit",
xlab = "Research", ylab = "Chance of Admit", col = c("lightblue", "lightgreen"))
# Histogram and boxplot for SOP
hist(data$SOP, main = "Histogram of SOP", col = "skyblue", xlab = "SOP")
boxplot(data$Chance.of.Admit ~ data$SOP, main = "SOP vs Chance of Admit",
xlab = "SOP", ylab = "Chance of Admit", col = "lightgreen")
# Histogram and boxplot for LOR
hist(data$LOR, main = "Histogram of LOR", col = "skyblue", xlab = "LOR")
boxplot(data$Chance.of.Admit ~ data$LOR, main = "LOR vs Chance of Admit",
xlab = "LOR", ylab = "Chance of Admit", col = "lightgreen")
# Reset图形排列
par(mfrow = c(1, 1))
# 检查 SOP 的异常值
sop_iqr <- IQR(data$SOP, na.rm = TRUE)
sop_upper <- quantile(data$SOP, 0.75, na.rm = TRUE) + 1.5 * sop_iqr
sop_lower <- quantile(data$SOP, 0.25, na.rm = TRUE) - 1.5 * sop_iqr
sop_outliers <- data$SOP[data$SOP < sop_lower | data$SOP > sop_upper]
cat("SOP 异常值:\n")
print(sop_outliers)
# 检查 LOR 的异常值
lor_iqr <- IQR(data$LOR, na.rm = TRUE)
lor_upper <- quantile(data$LOR, 0.75, na.rm = TRUE) + 1.5 * lor_iqr
lor_lower <- quantile(data$LOR, 0.25, na.rm = TRUE) - 1.5 * lor_iqr
lor_outliers <- data$LOR[data$LOR < lor_lower | data$LOR > lor_upper]
cat("LOR 异常值:\n")
print(lor_outliers)
# Convert the dataset to long format
long_data <- pivot_longer(data, cols = !"Serial.No.", names_to = "Variable", values_to = "Value")
# Convert categorical columns into factors
# Assuming "University Rating" and "Research" are categorical variables
data$University.Rating <- as.factor(data$University.Rating)
data$Research <- as.factor(data$Research)
#str(data)
# Load necessary library
library(tidyr)
# Load the dataset
data <- read.csv("Admission_Predict_Ver1.1.csv")
print(sum(is.na(data)))
print(sum(duplicated(data)))
# 绘制连续变量的直方图和箱线图
par(mfrow = c(2, 2)) # 设置图形布局
for (col in c("GRE.Score", "TOEFL.Score", "CGPA")) {
hist(data[[col]], main = paste("Histogram of", col), xlab = col, col = "skyblue", border = "black")
boxplot(data[[col]], main = paste("Boxplot of", col), ylab = col, col = "orange")
}
# 绘制分类变量的柱状图和箱线图
# 设置图形排列
par(mfrow = c(2, 2))
barplot(table(data$University.Rating), main = "University Rating Distribution", col = "lightblue")
boxplot(data$Chance.of.Admit ~ data$University.Rating, main = "Chance of Admit by University Rating",
xlab = "University Rating", ylab = "Chance of Admit", col = "lightgreen")
# Histogram and boxplot for Research
barplot(table(data$Research), main = "Barplot of Research", col = "skyblue",
xlab = "Research (0 = No, 1 = Yes)", ylab = "Frequency")
boxplot(data$Chance.of.Admit ~ data$Research, main = "Research vs Chance of Admit",
xlab = "Research", ylab = "Chance of Admit", col = c("lightblue", "lightgreen"))
# Histogram and boxplot for SOP
hist(data$SOP, main = "Histogram of SOP", col = "skyblue", xlab = "SOP")
boxplot(data$Chance.of.Admit ~ data$SOP, main = "SOP vs Chance of Admit",
xlab = "SOP", ylab = "Chance of Admit", col = "lightgreen")
# Histogram and boxplot for LOR
hist(data$LOR, main = "Histogram of LOR", col = "skyblue", xlab = "LOR")
boxplot(data$Chance.of.Admit ~ data$LOR, main = "LOR vs Chance of Admit",
xlab = "LOR", ylab = "Chance of Admit", col = "lightgreen")
# Reset图形排列
par(mfrow = c(1, 1))
# 检查 SOP 的异常值
sop_iqr <- IQR(data$SOP, na.rm = TRUE)
sop_upper <- quantile(data$SOP, 0.75, na.rm = TRUE) + 1.5 * sop_iqr
sop_lower <- quantile(data$SOP, 0.25, na.rm = TRUE) - 1.5 * sop_iqr
sop_outliers <- data$SOP[data$SOP < sop_lower | data$SOP > sop_upper]
cat("SOP 异常值:\n")
print(sop_outliers)
# 检查 LOR 的异常值
lor_iqr <- IQR(data$LOR, na.rm = TRUE)
lor_upper <- quantile(data$LOR, 0.75, na.rm = TRUE) + 1.5 * lor_iqr
lor_lower <- quantile(data$LOR, 0.25, na.rm = TRUE) - 1.5 * lor_iqr
lor_outliers <- data$LOR[data$LOR < lor_lower | data$LOR > lor_upper]
cat("LOR 异常值:\n")
print(lor_outliers)
# Convert the dataset to long format
long_data <- pivot_longer(data, cols = !"Serial.No.", names_to = "Variable", values_to = "Value")
# Convert categorical columns into factors
# Assuming "University Rating" and "Research" are categorical variables
data$University.Rating <- as.factor(data$University.Rating)
data$Research <- as.factor(data$Research)
#str(data)
# Load necessary library
library(tidyr)
# Load the dataset
data <- read.csv("Admission_Predict_Ver1.1.csv")
print(sum(is.na(data)))
print(sum(duplicated(data)))
# 绘制连续变量的直方图和箱线图
par(mfrow = c(2, 2)) # 设置图形布局
for (col in c("GRE.Score", "TOEFL.Score", "CGPA")) {
hist(data[[col]], main = paste("Histogram of", col), xlab = col, col = "skyblue", border = "black")
boxplot(data[[col]], main = paste("Boxplot of", col), ylab = col, col = "orange")
}
# 绘制分类变量的柱状图和箱线图
# 设置图形排列
par(mfrow = c(2, 2))
barplot(table(data$University.Rating), main = "University Rating Distribution", col = "lightblue")
boxplot(data$Chance.of.Admit ~ data$University.Rating, main = "Chance of Admit by University Rating",
xlab = "University Rating", ylab = "Chance of Admit", col = "lightgreen")
# Histogram and boxplot for Research
barplot(table(data$Research), main = "Barplot of Research", col = "skyblue",
xlab = "Research (0 = No, 1 = Yes)", ylab = "Frequency")
boxplot(data$Chance.of.Admit ~ data$Research, main = "Research vs Chance of Admit",
xlab = "Research", ylab = "Chance of Admit", col = c("lightblue", "lightgreen"))
# Histogram and boxplot for SOP
hist(data$SOP, main = "Histogram of SOP", col = "skyblue", xlab = "SOP")
boxplot(data$Chance.of.Admit ~ data$SOP, main = "SOP vs Chance of Admit",
xlab = "SOP", ylab = "Chance of Admit", col = "lightgreen")
# Histogram and boxplot for LOR
hist(data$LOR, main = "Histogram of LOR", col = "skyblue", xlab = "LOR")
boxplot(data$Chance.of.Admit ~ data$LOR, main = "LOR vs Chance of Admit",
xlab = "LOR", ylab = "Chance of Admit", col = "lightgreen")
# Reset图形排列
par(mfrow = c(1, 1))
# Convert the dataset to long format
long_data <- pivot_longer(data, cols = !"Serial.No.", names_to = "Variable", values_to = "Value")
# Convert categorical columns into factors
# Assuming "University Rating" and "Research" are categorical variables
data$University.Rating <- as.factor(data$University.Rating)
data$Research <- as.factor(data$Research)
#str(data)
par(mfrow = c(1, 2))
# Frequency distribution for University Rating
university_rating_freq <- table(data$University.Rating)
cat("Frequency Distribution for University Rating:\n")
print(university_rating_freq)
# Plot University Rating vs. Chance of Admit
plot(data$University.Rating, data$Chance.of.Admit, main="University Rating",
xlab="University Rating", ylab="Chance of Admit", pch=19, col="red")
# Frequency distribution for Research
research_freq <- table(data$Research)
cat("Frequency Distribution for Research:\n")
print(research_freq)
# Create a boxplot to visualize the effect of Research on Chance of Admit
boxplot(data$Chance.of.Admit ~ data$Research,
main = "Research",
xlab = "Research Experience (0 = No, 1 = Yes)",
ylab = "Chance of Admit",
col = c("lightblue", "lightgreen"))
par(mfrow = c(2, 3))
# Plot GRE Score vs. Chance of Admit
plot(data$GRE.Score, data$Chance.of.Admit, main="GRE Score",
xlab="GRE Score", ylab="Chance of Admit", pch=19, col="blue")
# Plot TOEFL Score vs. Chance of Admit
plot(data$TOEFL.Score, data$Chance.of.Admit, main="TOEFL Score",
xlab="TOEFL Score", ylab="Chance of Admit", pch=19, col="green")
# Plot SOP vs. Chance of Admit
plot(data$SOP, data$Chance.of.Admit, main="SOP",
xlab="SOP", ylab="Chance of Admit", pch=19, col="purple")
# Plot LOR vs. Chance of Admit
plot(data$LOR, data$Chance.of.Admit, main="LOR",
xlab="LOR", ylab="Chance of Admit", pch=19, col="orange")
# Plot CGPA vs. Chance of Admit
plot(data$CGPA, data$Chance.of.Admit, main="CGPA",
xlab="CGPA", ylab="Chance of Admit", pch=19, col="brown")
# Reset plotting area to default
par(mfrow = c(1, 1))
# Split the data into training and testing sets
set.seed(42)
trainIndex <- sample(1:nrow(data), 0.8 * nrow(data))
trainData <- data[trainIndex, ]
testData <- data[-trainIndex, ]
# Fit a linear regression model
model <- lm(Chance_of_Admit ~ GRE_Score + TOEFL_Score + University_Rating + SOP + LOR + CGPA + Research, data = trainData)
# Split the data into training and testing sets
set.seed(42)
trainIndex <- sample(1:nrow(data), 0.8 * nrow(data))
trainData <- data[trainIndex, ]
testData <- data[-trainIndex, ]
# Fit a linear regression model
model <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + University.Rating + SOP + LOR + CGPA + Research, data = trainData)
# Summarize the model
summary(model)
# Make predictions on the test set
predictions <- predict(model, newdata = testData)
# Calculate Mean Squared Error (MSE)
mse <- mean((testData$Chance.of.Admit - predictions)^2)
# Calculate R-squared
rss <- sum((testData$Chance.of.Admit - predictions)^2)
tss <- sum((testData$Chance.of.Admit - mean(trainData$Chance.of.Admit))^2)
r2 <- 1 - (rss/tss)
# Print MSE and R-squared for the reduced model
print(paste("Full Model MSE:", mse))
print(paste("Full Model R-squared:", r2))
# Split the data into training and testing sets
set.seed(42)
trainIndex <- sample(1:nrow(data), 0.8 * nrow(data))
trainData <- data[trainIndex, ]
testData <- data[-trainIndex, ]
# Fit the reduced linear regression model excluding insignificant variables
reduced_model <- lm(Chance.of_Admit ~ GRE_Score + TOEFL.Score + LOR + CGPA + Research, data = trainData)
# Split the data into training and testing sets
set.seed(42)
trainIndex <- sample(1:nrow(data), 0.8 * nrow(data))
trainData <- data[trainIndex, ]
testData <- data[-trainIndex, ]
# Fit the reduced linear regression model excluding insignificant variables
reduced_model <- lm(Chance.of.Admit ~ GRE_Score + TOEFL.Score + LOR + CGPA + Research, data = trainData)
# Split the data into training and testing sets
set.seed(42)
trainIndex <- sample(1:nrow(data), 0.8 * nrow(data))
trainData <- data[trainIndex, ]
testData <- data[-trainIndex, ]
# Fit the reduced linear regression model excluding insignificant variables
reduced_model <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + LOR + CGPA + Research, data = trainData)
# Summarize the reduced model
summary(reduced_model)
# Make predictions on the test set using the reduced model
reduced_predictions <- predict(reduced_model, newdata = testData)
# Calculate Mean Squared Error (MSE) for the reduced model
reduced_mse <- mean((testData$Chance.of.Admit - reduced_predictions)^2, na.rm = TRUE)
# Calculate R-squared for the reduced model
rss <- sum((testData$Chance.of.Admit - reduced_predictions)^2, na.rm = TRUE)
tss <- sum((testData$Chance.of.Admit - mean(trainData$Chance.of.Admit, na.rm = TRUE))^2, na.rm = TRUE)
reduced_r2 <- 1 - (rss/tss)
# Print MSE and R-squared for the reduced model
print(paste("Reduced Model MSE:", reduced_mse))
print(paste("Reduced Model R-squared:", reduced_r2))
# 线性回归建模
model <- lm(Chance_of_Admit ~ GRE_Score + TOEFL_Score + CGPA + SOP + LOR + University_Rating + Research, data = data)
# 线性回归建模
model <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + SOP + LOR + University.Rating + Research, data = data)
# 模型摘要
summary(model)
# 计算 VIF
library(car)
vif_values <- vif(model)
print(vif_values)
# 判断 VIF 是否过高
if(any(vif_values > 5)) {
cat("存在多重共线性，需要进一步处理。\n")
} else {
cat("共线性问题不明显，可以使用原始变量建模。\n")
}
# 线性回归建模
model <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + SOP + LOR + University.Rating + Research, data = data)
# 模型摘要
summary(model)
# 计算 VIF
library(car)
vif_values <- vif(model)
print(vif_values)
# 线性回归建模
model <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + SOP + LOR + University.Rating + Research, data = data)
# 模型摘要
summary(model)
# 计算 VIF
library(car)
vif_values <- vif(model)
#print(vif_values)
# 线性回归建模
model <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + SOP + LOR + University.Rating + Research, data = data)
# 模型摘要
summary(model)
# 计算 VIF
library(car)
vif_values <- vif(model)
print(vif_values)
# 计算 Adjusted R-squared 和残差分布
summary(model)
# 可视化残差
par(mfrow = c(1, 2))
plot(model$fitted.values, model$residuals,
main = "Residuals vs Fitted", xlab = "Fitted Values", ylab = "Residuals")
hist(model$residuals, main = "Residual Histogram", xlab = "Residuals")
par(mfrow = c(1, 1))
# 计算 Adjusted R-squared 和残差分布
summary(model)
# 可视化残差
par(mfrow = c(1, 2))
plot(model$fitted.values, model$residuals,
main = "Residuals vs Fitted", xlab = "Fitted Values", ylab = "Residuals")
hist(model$residuals, main = "Residual Histogram", xlab = "Residuals")
par(mfrow = c(1, 1))
qqnorm(model$residuals, main = "Q-Q Plot of Residuals")
qqline(model$residuals, col = "red")
# 计算 Adjusted R-squared 和残差分布
summary(model)
# 可视化残差
par(mfrow = c(1, 2))
plot(model$fitted.values, model$residuals,
main = "Residuals vs Fitted", xlab = "Fitted Values", ylab = "Residuals")
hist(model$residuals, main = "Residual Histogram", xlab = "Residuals")
par(mfrow = c(1, 1))
qqnorm(model$residuals, main = "Q-Q Plot of Residuals")
qqline(model$residuals, col = "red")
shapiro.test(model$residuals)
# 计算 Adjusted R-squared 和残差分布
summary(model)
# 可视化残差
par(mfrow = c(1, 2))
plot(model$fitted.values, model$residuals,
main = "Residuals vs Fitted", xlab = "Fitted Values", ylab = "Residuals")
hist(model$residuals, main = "Residual Histogram", xlab = "Residuals")
par(mfrow = c(1, 1))
qqnorm(model$residuals, main = "Q-Q Plot of Residuals")
qqline(model$residuals, col = "red")
shapiro.test(model$residuals)
data$log_admit <- log(data$Chance.of.Admit)
logmodel <- lm(log_admit ~ GRE.Score + TOEFL.Score + CGPA + SOP + LOR + University.Rating + Research, data = data)
qqnorm(logmodel$residuals, main = "Q-Q Plot of Residuals")
qqline(logmodel$residuals, col = "red")
model_poly <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + poly(SOP, 2) + LOR + University.Rating + Research, data = data)
summary(model_poly)
model_poly <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + poly(SOP, 3) + LOR + University.Rating + Research, data = data)
summary(model_poly)
model_poly <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + poly(SOP, 2) + LOR + University.Rating + Research, data = data)
summary(model_poly)
model_poly <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + poly(SOP, 3) + LOR + University.Rating + Research, data = data)
summary(model_poly)
model_poly <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + poly(SOP, 2) + LOR + University.Rating + Research, data = data)
summary(model_poly)
model_poly <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + poly(SOP, 3) + LOR + University.Rating + Research, data = data)
summary(model_poly)
model_poly <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + poly(SOP, 3) + poly(LOR,2) + University.Rating + Research, data = data)
summary(model_poly)
model_poly <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + poly(SOP, 3) + poly(LOR,3) + University.Rating + Research, data = data)
summary(model_poly)
model_poly <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + poly(SOP, 2) + poly(LOR,2) + University.Rating + Research, data = data)
summary(model_poly)
model_poly <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + poly(SOP, 2) + LOR + University.Rating + Research, data = data)
summary(model_poly)
model_poly <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + poly(SOP, 2) + LOR + University.Rating + Research, data = data)
summary(model_poly)
par(mfrow = c(1, 2))
plot(model_poly$fitted.values, model_poly$residuals,
main = "Residuals vs Fitted", xlab = "Fitted Values", ylab = "Residuals")
hist(model_poly$residuals, main = "Residual Histogram", xlab = "Residuals")
par(mfrow = c(1, 1))
qqnorm(model_poly$residuals, main = "Q-Q Plot of Residuals")
qqline(model_poly$residuals, col = "red")
shapiro.test(model_poly$residuals)
model_poly <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + poly(SOP, 2) + LOR + University.Rating + Research, data = data)
summary(model_poly)
model_interaction <- lm(Chance.of.Admit ~ GRE.Score * University.Rating + TOEFL.Score + CGPA + SOP + LOR + Research, data = data)
summary(model_interaction)
library(caret)
pca <- preProcess(data[, c("GRE.Score", "TOEFL.Score", "CGPA", "SOP", "LOR")], method = "pca", pcaComp = 3)
pca_data <- predict(pca, data)
model_pca <- lm(Chance.of.Admit ~ PC1 + PC2 + PC3 + University.Rating + Research, data = cbind(data, pca_data))
summary(model_pca)
library(caret)
# 定义模型
model_list <- list(
base = lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + SOP + LOR + University.Rating + Research, data = data),
poly = lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + poly(SOP, 2) + LOR + University.Rating + Research, data = data),
interaction = lm(Chance.of.Admit ~ GRE.Score * University.Rating + TOEFL.Score + CGPA + SOP + LOR + Research, data = data)
)
# 定义交叉验证
cv_results <- lapply(model_list, function(model) {
train_control <- trainControl(method = "cv", number = 10)
train(Chance.of.Admit ~ ., data = data, method = "lm", trControl = train_control)
})
# 打印 RMSE 比较
sapply(cv_results, function(res) res$results$RMSE)
model_poly <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + poly(SOP, 3) + LOR + University.Rating + Research, data = data)
summary(model_poly)
#polynomial regression
library(caret)
# 定义模型
model_list <- list(
base = lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + SOP + LOR + University.Rating + Research, data = data),
poly = lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + poly(SOP, 2) + LOR + University.Rating + Research, data = data),
interaction = lm(Chance.of.Admit ~ GRE.Score * University.Rating + TOEFL.Score + CGPA + SOP + LOR + Research, data = data)
)
# 定义交叉验证
cv_results <- lapply(model_list, function(model) {
train_control <- trainControl(method = "cv", number = 10)
train(Chance.of.Admit ~ ., data = data, method = "lm", trControl = train_control)
})
# 打印 RMSE 比较
sapply(cv_results, function(res) res$results$RMSE)
library(caret)
# 定义模型
model_list <- list(
base = lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + SOP + LOR + University.Rating + Research, data = data),
poly = lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + poly(SOP, 2) + LOR + University.Rating + Research, data = data),
interaction = lm(Chance.of.Admit ~ GRE.Score * University.Rating + TOEFL.Score + CGPA + SOP + LOR + Research, data = data)
)
# 定义交叉验证
cv_results <- lapply(model_list, function(model) {
train_control <- trainControl(method = "cv", number = 10)
train(Chance.of.Admit ~ ., data = data, method = "lm", trControl = train_control)
})
# 打印 RMSE 比较
sapply(cv_results, function(res) res$results$RMSE)
model_poly <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + poly(SOP, 2) + LOR + University.Rating + Research, data = data)
summary(model_poly)
#polynomial regression
library(caret)
# 定义模型
model_list <- list(
base = lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + SOP + LOR + University.Rating + Research, data = data),
poly = lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + poly(SOP, 2) + LOR + University.Rating + Research, data = data),
interaction = lm(Chance.of.Admit ~ GRE.Score * University.Rating + TOEFL.Score + CGPA + SOP + LOR + Research, data = data)
)
# 定义交叉验证
cv_results <- lapply(model_list, function(model) {
train_control <- trainControl(method = "cv", number = 100)
train(Chance.of.Admit ~ ., data = data, method = "lm", trControl = train_control)
})
# 打印 RMSE 比较
sapply(cv_results, function(res) res$results$RMSE)
library(caret)
# 定义模型
model_list <- list(
base = lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + SOP + LOR + University.Rating + Research, data = data),
poly = lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + poly(SOP, 2) + LOR + University.Rating + Research, data = data),
interaction = lm(Chance.of.Admit ~ GRE.Score * University.Rating + TOEFL.Score + CGPA + SOP + LOR + Research, data = data)
)
# 定义交叉验证
cv_results <- lapply(model_list, function(model) {
train_control <- trainControl(method = "cv", number = 250)
train(Chance.of.Admit ~ ., data = data, method = "lm", trControl = train_control)
})
# 打印 RMSE 比较
sapply(cv_results, function(res) res$results$RMSE)
library(caret)
# 定义模型
model_list <- list(
base = lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + SOP + LOR + University.Rating + Research, data = data),
poly = lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + poly(SOP, 2) + LOR + University.Rating + Research, data = data),
interaction = lm(Chance.of.Admit ~ GRE.Score * University.Rating + TOEFL.Score + CGPA + SOP + LOR + Research, data = data)
)
# 定义交叉验证
cv_results <- lapply(model_list, function(model) {
train_control <- trainControl(method = "cv", number = 100)
train(Chance.of.Admit ~ ., data = data, method = "lm", trControl = train_control)
})
# 打印 RMSE 比较
sapply(cv_results, function(res) res$results$RMSE)
library(caret)
# 定义模型
model_list <- list(
base = lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + SOP + LOR + University.Rating + Research, data = data),
poly = lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + poly(SOP, 3) + LOR + University.Rating + Research, data = data),
interaction = lm(Chance.of.Admit ~ GRE.Score * University.Rating + TOEFL.Score + CGPA + SOP + LOR + Research, data = data)
)
# 定义交叉验证
cv_results <- lapply(model_list, function(model) {
train_control <- trainControl(method = "cv", number = 100)
train(Chance.of.Admit ~ ., data = data, method = "lm", trControl = train_control)
})
# 打印 RMSE 比较
sapply(cv_results, function(res) res$results$RMSE)
library(caret)
# 定义模型
model_list <- list(
base = lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + SOP + LOR + University.Rating + Research, data = data),
poly = lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + CGPA + poly(SOP, 2) + LOR + University.Rating + Research, data = data),
interaction = lm(Chance.of.Admit ~ GRE.Score * University.Rating + TOEFL.Score + CGPA + SOP + LOR + Research, data = data)
)
# 定义交叉验证
cv_results <- lapply(model_list, function(model) {
train_control <- trainControl(method = "cv", number = 100)
train(Chance.of.Admit ~ ., data = data, method = "lm", trControl = train_control)
})
# 打印 RMSE 比较
sapply(cv_results, function(res) res$results$RMSE)
# Split the data into training and testing sets
set.seed(42)
trainIndex <- sample(1:nrow(data), 0.8 * nrow(data))
trainData <- data[trainIndex, ]
testData <- data[-trainIndex, ]
# Fit a linear regression model
model <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + University.Rating + SOP + LOR + CGPA + Research, data = trainData)
# Summarize the model
summary(model)
# Make predictions on the test set
predictions <- predict(model, newdata = testData)
# Calculate Mean Squared Error (MSE)
mse <- mean((testData$Chance.of.Admit - predictions)^2)
# Calculate R-squared
rss <- sum((testData$Chance.of.Admit - predictions)^2)
tss <- sum((testData$Chance.of.Admit - mean(trainData$Chance.of.Admit))^2)
r2 <- 1 - (rss/tss)
# Print MSE and R-squared for the reduced model
print(paste("Full Model MSE:", mse))
print(paste("Full Model R-squared:", r2))
# Split the data into training and testing sets
set.seed(42)
trainIndex <- sample(1:nrow(data), 0.8 * nrow(data))
trainData <- data[trainIndex, ]
testData <- data[-trainIndex, ]
# Fit the reduced linear regression model excluding insignificant variables
reduced_model <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + LOR + CGPA + Research, data = trainData)
# Summarize the reduced model
summary(reduced_model)
# Make predictions on the test set using the reduced model
reduced_predictions <- predict(reduced_model, newdata = testData)
# Calculate Mean Squared Error (MSE) for the reduced model
reduced_mse <- mean((testData$Chance.of.Admit - reduced_predictions)^2, na.rm = TRUE)
# Calculate R-squared for the reduced model
rss <- sum((testData$Chance.of.Admit - reduced_predictions)^2, na.rm = TRUE)
tss <- sum((testData$Chance.of.Admit - mean(trainData$Chance.of.Admit, na.rm = TRUE))^2, na.rm = TRUE)
reduced_r2 <- 1 - (rss/tss)
# Print MSE and R-squared for the reduced model
print(paste("Reduced Model MSE:", reduced_mse))
print(paste("Reduced Model R-squared:", reduced_r2))
